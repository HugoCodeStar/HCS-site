"use strict";(self.webpackChunkhugo_code_star_site=self.webpackChunkhugo_code_star_site||[]).push([[4458],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(t),m=a,f=d["".concat(l,".").concat(m)]||d[m]||c[m]||i;return t?r.createElement(f,o(o({ref:n},p),{},{components:t})):r.createElement(f,o({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7191:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return p},default:function(){return d}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),o=["components"],s={title:"Fonctions",sidebar_label:"7 - Fonctions"},l=void 0,u={unversionedId:"inf5111/Cours/cours7",id:"inf5111/Cours/cours7",isDocsHomePage:!1,title:"Fonctions",description:"Fonctions",source:"@site/docs/inf5111/Cours/cours7.md",sourceDirName:"inf5111/Cours",slug:"/inf5111/Cours/cours7",permalink:"/site/docs/inf5111/Cours/cours7",editUrl:"https://github.com/HugoCodeStar/site/edit/master/docs/inf5111/Cours/cours7.md",tags:[],version:"current",frontMatter:{title:"Fonctions",sidebar_label:"7 - Fonctions"},sidebar:"INF5111Sidebar",previous:{title:"6 - If, while et for",permalink:"/site/docs/inf5111/Cours/cours6"},next:{title:"Intro",permalink:"/site/docs/inf5111"}},p=[{value:"Fonctions",id:"fonctions",children:[]},{value:"Pr\xe9sentation d&#39;une fonction minimale",id:"pr\xe9sentation-dune-fonction-minimale",children:[]},{value:"Param\xe8tres d&#39;entr\xe9es",id:"param\xe8tres-dentr\xe9es",children:[]},{value:"Retours",id:"retours",children:[]},{value:"Exemple 1",id:"exemple-1",children:[]},{value:"Pr\xe9sentation de l&#39;en-t\xeate d&#39;une fonction",id:"pr\xe9sentation-de-len-t\xeate-dune-fonction",children:[]},{value:"Contexte et dur\xe9e de vies des variables",id:"contexte-et-dur\xe9e-de-vies-des-variables",children:[]},{value:"Passage par valeurs",id:"passage-par-valeurs",children:[]},{value:"Exemple 2",id:"exemple-2",children:[]}],c={toc:p};function d(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"fonctions"},"Fonctions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Les fonctions sont des s\xe9ries d'instructions contenues dans un ensemble pouvant \xeatre facilement re-utilis\xe9. Par convention, la fonction doit faire une t\xe2che simple et pr\xe9cise;"),(0,i.kt)("li",{parentName:"ul"},"Contrairement aux scripts, les fonctions n'auront pas de saisit avec ",(0,i.kt)("inlineCode",{parentName:"li"},"input")," et pas d'affichage avec ",(0,i.kt)("inlineCode",{parentName:"li"},"print"),". Cela \xe0 moins d'\xeatre express\xe9ment demand\xe9."),(0,i.kt)("li",{parentName:"ul"},"Les fonctions peuvent demander des param\xe8tres (ou arguments) d'entr\xe9es. Ce sont des informations pr\xe9alables aux calculs de la fonction;"),(0,i.kt)("li",{parentName:"ul"},"Les fonctions peuvent \xe9mettre des r\xe9ponses que l'on appelle retour.")),(0,i.kt)("h2",{id:"pr\xe9sentation-dune-fonction-minimale"},"Pr\xe9sentation d'une fonction minimale"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def nomFonction():\n    instructions\n\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Une fonction est au d\xe9but du fichier;"),(0,i.kt)("li",{parentName:"ul"},"La fonction peut ensuite \xeatre appel\xe9e par son nom d'autres programmes.")),(0,i.kt)("h2",{id:"param\xe8tres-dentr\xe9es"},"Param\xe8tres d'entr\xe9es"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Une fonction peut demander des param\xe8tres d'entr\xe9es;"),(0,i.kt)("li",{parentName:"ul"},"Ceux-ci seront dans une liste apr\xe8s le nom de la fonction entre parenth\xe8ses d\xe9limit\xe9e par une virgule;"),(0,i.kt)("li",{parentName:"ul"},"Les param\xe8tres d'entr\xe9es seront fournis par l'appelant de la fonction et peuvent donc \xeatre utilis\xe9s \xe0 l'int\xe9rieur des instructions de la fonction sans \xeatre assign\xe9s pr\xe9alablement.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def fcnAvecIn(var1, var2):\n    print(var1 * var2)\n\n")),(0,i.kt)("h2",{id:"retours"},"Retours"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"La fonction peut retourner un r\xe9sultat qui sera utilisable par l'appelant de la fonction."),(0,i.kt)("li",{parentName:"ul"},"Le mot-cl\xe9 ",(0,i.kt)("inlineCode",{parentName:"li"},"return")," est utilis\xe9 quand l'expression de retour est pr\xeate \xe0 \xeatre renvoy\xe9e."),(0,i.kt)("li",{parentName:"ul"},"Une fonction qui ne contient pas de retour est aussi nomm\xe9e une proc\xe9dure.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def fcnAvecRetour():\n    instructions\n    return expression\n")),(0,i.kt)("h2",{id:"exemple-1"},"Exemple 1"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\xc9crivez une fonction qui trouve l\u2019aire d\u2019un triangle \xe0 partir de sa base et sa hauteur.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def aireTriangle(base, hauteur):\n    return base * hauteur / 2\n\n# Utilisation de la fonction dans un programme\naire = aireTriangle(3,4)\n\nif aire > 10:\n    print('super')\nelse:\n    print('booooo')\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"\xc9crivez une fonction qui d\xe9termine si un nombre est impair.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"def estImpair(nombre):\n    if nombre % 2 == 1:\n        return True\n    else:\n        return False\n\ndef estImpairEfficace(nombre):\n    return nombre % 2 == 1\n\n\nprint(estImpair((1564)))\n")),(0,i.kt)("h2",{id:"pr\xe9sentation-de-len-t\xeate-dune-fonction"},"Pr\xe9sentation de l'en-t\xeate d'une fonction"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def nomFonction(arg1, arg2):\n"""\nDescription g\xe9n\xe9rale de la fonction\nArgs:\n  arg1 (float) - Description de l\'arg1\n  arg2 (bool) - Description de l\'arg2\nReturns:\n  float: Description de retour1\nExample:\n  >> nomFonction(4,6)\n      34\n"""\n    instructions\n')),(0,i.kt)("h2",{id:"contexte-et-dur\xe9e-de-vies-des-variables"},"Contexte et dur\xe9e de vies des variables"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Tout ce qui se passe \xe0 l'int\xe9rieur des fonctions est d\xe9truit apr\xe8s l'appel de la fonction;"),(0,i.kt)("li",{parentName:"ul"},"Toute d\xe9claration de variables \xe0 l'int\xe9rieur d'une fonction est d\xe9truite apr\xe8s l'appel de la fonction;"),(0,i.kt)("li",{parentName:"ul"},"Seule la valeur de retour est renvoy\xe9e.")),(0,i.kt)("h2",{id:"passage-par-valeurs"},"Passage par valeurs"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Les param\xe8tres et les retours sont renomm\xe9s pour la dur\xe9e de la fonction. Les noms des param\xe8tres de la fonction se nomment param\xe8tres formels;"),(0,i.kt)("li",{parentName:"ul"},"Seules leurs valeurs seront transf\xe9r\xe9es entre la fonction et l'appelant. On utilise le terme param\xe8tres effectifs;"),(0,i.kt)("li",{parentName:"ul"},"Les noms des param\xe8tres et des retours n'ont aucune incidence;"),(0,i.kt)("li",{parentName:"ul"},"L'ordre des param\xe8tres et des retours est ce qui sera consid\xe9r\xe9.")),(0,i.kt)("h2",{id:"exemple-2"},"Exemple 2"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Quel est le r\xe9sultat de l'affichage du script ",(0,i.kt)("inlineCode",{parentName:"li"},"passageParValeurTest.py"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# passageParValeurTest.py\ndef  passageParValeur(x, y):\n    x = x + 2\n    y = y - 2\n    z = x - y + 2\n    return z\n\nx = 4\nz = 8\ny = 6\nx = passageParValeur(y,x)\nprint('La valeur de x,y et z sont :', x, y, z)\n")))}d.isMDXComponent=!0}}]);