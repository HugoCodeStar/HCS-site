"use strict";(self.webpackChunkhugo_code_star_site=self.webpackChunkhugo_code_star_site||[]).push([[2749],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=i.createContext({}),u=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return i.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,b=d["".concat(o,".").concat(m)]||d[m]||p[m]||r;return n?i.createElement(b,s(s({ref:t},c),{},{components:n})):i.createElement(b,s({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var u=2;u<r;u++)s[u]=n[u];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4981:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return o},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),s=["components"],l={title:"Propri\xe9t\xe9s et m\xe9thodes statiques",sidebar_label:"3 - Props & Static",sidebar_position:3},o=void 0,u={unversionedId:"b07/cours/cours3",id:"b07/cours/cours3",isDocsHomePage:!1,title:"Propri\xe9t\xe9s et m\xe9thodes statiques",description:"Propri\xe9t\xe9s",source:"@site/docs/b07/cours/cours3.md",sourceDirName:"b07/cours",slug:"/b07/cours/cours3",permalink:"/site/docs/b07/cours/cours3",editUrl:"https://github.com/HugoCodeStar/site/edit/master/docs/b07/cours/cours3.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Propri\xe9t\xe9s et m\xe9thodes statiques",sidebar_label:"3 - Props & Static",sidebar_position:3},sidebar:"B07Sidebar",previous:{title:"2 - Orient\xe9-objet",permalink:"/site/docs/b07/cours/cours2"},next:{title:"1 - Bases",permalink:"/site/docs/b07/exercices/exercices1"}},c=[{value:"Propri\xe9t\xe9s",id:"propri\xe9t\xe9s",children:[{value:"Utilisation de propri\xe9t\xe9s",id:"utilisation-de-propri\xe9t\xe9s",children:[]},{value:"Impl\xe9mentation automatique des propri\xe9t\xe9s",id:"impl\xe9mentation-automatique-des-propri\xe9t\xe9s",children:[]},{value:"Propri\xe9t\xe9s et champs immuable",id:"propri\xe9t\xe9s-et-champs-immuable",children:[]},{value:"Initialisation rapide d&#39;objet",id:"initialisation-rapide-dobjet",children:[]}]},{value:"Static",id:"static",children:[{value:"Champs statique",id:"champs-statique",children:[]},{value:"Propri\xe9t\xe9s statiques",id:"propri\xe9t\xe9s-statiques",children:[]},{value:"M\xe9thodes statiques",id:"m\xe9thodes-statiques",children:[]},{value:"Constructeur statique",id:"constructeur-statique",children:[]},{value:"Classe statique",id:"classe-statique",children:[]}]},{value:"R\xe9f\xe9rence null",id:"r\xe9f\xe9rence-null",children:[{value:"Variable nullable",id:"variable-nullable",children:[]}]}],p={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,s);return(0,r.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"propri\xe9t\xe9s"},"Propri\xe9t\xe9s"),(0,r.kt)("p",null,"L'utilisation de getter et setter ajoute beacoup de coode similiaire (boilerplate en anglais). Il est possible d'utilis\xe9 les propri\xe9t\xe9s pour avec des getter et setter int\xe9gr\xe9 \xe0 la syntaxe."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c#"},"public class Rectangle\n{\n    private float _width; //On garde une variable de classe\n    private float _height;\n\n    public Rectangle(float width, float height)\n    {\n        _width = width;\n        _height = height;\n    }\n\n    // La cr\xe9ation d'une propri\xe9t\xe9\n    public float Width\n    {\n        // Une m\xe9thode get\n        get => _width;\n        // Une m\xe9thode set avec un param\xe8tre implicite nomm\xe9 value\n        set => _width = value;\n    }\n\n    public float Height\n    {\n        get => _height;\n        // Il est possible de mettre une des m\xe9thodes priv\xe9es\n        private set => _height = value; \n    }\n\n    public float Area => _width * _height;\n}\n")),(0,r.kt)("h3",{id:"utilisation-de-propri\xe9t\xe9s"},"Utilisation de propri\xe9t\xe9s"),(0,r.kt)("p",null,"Les propri\xe9t\xe9s sont ensuite directement reli\xe9 \xe0 leur nom comme si c'\xe9tait des variables de classe publique."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c#"},'Rectangle r = new Rectangle(2, 3);\nr.Width = 5;\nConsole.WriteLine($"A {r.Width}x{r.Height} rectangle has an area of {r.Area}.");\n')),(0,r.kt)("h3",{id:"impl\xe9mentation-automatique-des-propri\xe9t\xe9s"},"Impl\xe9mentation automatique des propri\xe9t\xe9s"),(0,r.kt)("p",null,"La majorit\xe9 des getter et setter sont tr\xe8s simple et n'a pas besoin de code sp\xe9cial. Il y a une syntaxe abr\xe9g\xe9 pour ces cas."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c#"},'public class Player\n{\n    public string Name { get; set; } = "Player";\n}\n')),(0,r.kt)("p",null,"Voici notre exemple avec la classe Rectangle:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c#"},"public class Rectangle // Note how short this code got with auto-properties.\n{\n    public float Width { get; set; }\n    public float Height { get; set; }\n    public float Area =>  Width * Height;\n\n    public Rectangle(float width, float height)\n    {\n        Width = width;\n        Height = height;\n    }\n}\n")),(0,r.kt)("h3",{id:"propri\xe9t\xe9s-et-champs-immuable"},"Propri\xe9t\xe9s et champs immuable"),(0,r.kt)("p",null,"Il est possible de forcer une propri\xe9t\xe9 ou une variable d'instance a \xeatre en lecture seule. Le seul endroit possible de modification est durant l'initailisation ou dans les constructeurs de la classe."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c#"},"public class Player\n{\n    // Seulement le get est disponible\n    public string Name { get; } = \"Player 1\";\n    public Player(string name)\n    {\n        Name = name;\n    } \n}\n\npublic class Player\n{\n    // L'ajour de l'option readonly met la variable d'instance immuable (autre que dans le constructeur)\n    private readonly string _name;\n    \n    public Player(string name)\n    {\n        _name = name;\n    } \n}\n")),(0,r.kt)("h3",{id:"initialisation-rapide-dobjet"},"Initialisation rapide d'objet"),(0,r.kt)("p",null,"Puisque plusieurs constructeur prennent les param\xe8tres pour construire un objet, un syntaxe simplifi\xe9 existe pour la construction d'objet."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c#"},"Circle circle = new Circle(){ Radius = 3, X = -4 };\nCircle circle2 = new Circle{ Radius = 3, X = -4 };\n\n\npublic class Circle\n{\n    public float X { get; set; } = 0; // The x-coordinate of the circle's center. public \n    float Y { get; set; } = 0; // The y-coordinate of the circle's center. \n    public float Radius { get; set; } = 0;\n}\n\n//Si nous ne voulons pas de set disponible mais que la syntaxe soit disponible durant la construction d'objet\npublic class Circle\n{\n    public float X { get; init; } = 0;\n    public float Y { get; init; } = 0;\n    public float Radius { get; init; } = 0;\n}\n")),(0,r.kt)("h2",{id:"static"},"Static"),(0,r.kt)("p",null,"Il est possible d'avoir des \xe9l\xe9ments statique \xe0 une classe qui existerons \xe0 l'ext\xe9rieur des instances de la classe. Nous pourrons donc avoir des variables de classes et de m\xe9thodes statiques. Ces membres seront disponible dans les programmes qui impl\xe9mente la classe."),(0,r.kt)("h3",{id:"champs-statique"},"Champs statique"),(0,r.kt)("p",null,"Le mot cl\xe9 statique peut \xeatre ajouter aux variables d'instance pour la variable appartiennent \xe0 la classe statique."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c#"},"public class Score\n{\n    private static readonly int PointThreshold = 1000;\n    private static readonly int LevelThreshold = 4;\n    // ... \n}\n")),(0,r.kt)("p",null,"Les champs statiques seront disponible dans toutes les m\xe9thodes de la classe ou de l'ext\xe9rieur si l'\xe9l\xe9ment est ",(0,r.kt)("inlineCode",{parentName:"p"},"public"),". Pour y acced\xe9 de l'ext\xe9rieur, nous utiliserons le nom de la classe comme \xe9l\xe9ment initiale (ex: ",(0,r.kt)("inlineCode",{parentName:"p"},"Score.LevelThreshold"),")."),(0,r.kt)("h3",{id:"propri\xe9t\xe9s-statiques"},"Propri\xe9t\xe9s statiques"),(0,r.kt)("p",null,"Les propri\xe9t\xe9s peuvent aussi \xeatre statique avec le mot cl\xe9 ",(0,r.kt)("inlineCode",{parentName:"p"},"static"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c#"},"public class Score\n{\n    public static int PointThreshold { get; } = 1000;\n    public static int LevelThreshold { get; } = 4;\n    // ...\n}\n")),(0,r.kt)("h3",{id:"m\xe9thodes-statiques"},"M\xe9thodes statiques"),(0,r.kt)("p",null,"Les m\xe9thodes statiques pourront \xeatre invoqu\xe9s sans instances. Les m\xe9thodes statiques sont habituellement des m\xe9thodes d'aides qui seront utilis\xe9s contextuellement avec la classe sans avoir besoin d'instance de la classe."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c#"},"public   int CountForPlayer(string playerName, Score[] scores)\n{\n    int count = 0;\n    foreach (Score score in scores)\n        if (score.Name == playerName) count++;\n    return count;\n}\n")),(0,r.kt)("p",null,"Les m\xe9thodes statiques sont aussi souvent utiliser pour des m\xe9thodes de cr\xe9ation (Factory methods) qui permet de cr\xe9\xe9 des objets avec des nom plus appropri\xe9s que le constructeur ou pour contourner les conflit dans des signatures identique du constructeurs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c#"},"// M\xe9thode statique dans la classe Rectangle\npublic static Rectangle CreateSquare(float size) => new Rectangle(size, size);\n\n// Utilisation du factory\nRectangle rectangle = Rectangle.CreateSquare(2);\n")),(0,r.kt)("h3",{id:"constructeur-statique"},"Constructeur statique"),(0,r.kt)("p",null,"Si les champs statiques ont besoin d'initialisation, il est aussi possible d'avoir un constructeur statique. Ce dernier ne peut pas avoir de param\xe8tre et sera invoqu\xe9 automatique au d\xe9but du programme. Il ne peut pas \xeatre appell\xe9 par la suite."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c#"},"public class Score\n{\n    public static readonly int PointThreshold;\n    public static readonly int LevelThreshold;\n    static Score()\n    {\n        PointThreshold = 1000;\n        LevelThreshold = 4;\n    }\n    //...\n}\n")),(0,r.kt)("h3",{id:"classe-statique"},"Classe statique"),(0,r.kt)("p",null,"Certaines classes n'ont pas besoin d'avoir d'instance. Celle-ci contiennent souvent juste une liste de m\xe9hodte statique contextuelle au probl\xe8me. Plusieurs classe fournit par le langage (comme ",(0,r.kt)("inlineCode",{parentName:"p"},"Console"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Convert")," ou ",(0,r.kt)("inlineCode",{parentName:"p"},"Math"),") sont des classes statiques. Les classes statiques sont utilis\xe9 \xe0 partir de leurs noms et ne peuvent pas \xeatre instanc\xe9 avec un ",(0,r.kt)("inlineCode",{parentName:"p"},"new"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c#"},"public class Utilities\n{\n    public static int Helper1() => 4;\n    public static double HelperProperty => 4.0;\n    public static int AddNumbers(int a, int b) => a + b;\n}\n")),(0,r.kt)("h2",{id:"r\xe9f\xe9rence-null"},"R\xe9f\xe9rence null"),(0,r.kt)("p",null,"Les objets instanci\xe9s ne sont pas directement sauvegard\xe9s \xe0 l'int\xe9rieur d'une variable comme on pourrait le penser \xe0 premi\xe8re vue. La variable contient une ",(0,r.kt)("strong",{parentName:"p"},"r\xe9f\xe9rence")," \xe0 l'objet en m\xe9moire."),(0,r.kt)("p",null,"Certaines implications arrivent avec cette m\xe9thode :"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Il est possible d'avoir plusieurs variables qui utilisent la m\xeame r\xe9f\xe9rence"),(0,r.kt)("li",{parentName:"ul"},"La modification d'un objet affecte toutes les variables avec cette r\xe9f\xe9rence"),(0,r.kt)("li",{parentName:"ul"},"Un objet existe en dehors de la variable cr\xe9\xe9e dans nos programmes."),(0,r.kt)("li",{parentName:"ul"},"Il est possible d'avoir une variable avec aucune r\xe9f\xe9rence. On parle ici d'une r\xe9f\xe9rence ",(0,r.kt)("inlineCode",{parentName:"li"},"null"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c#"},"// Une variable sans r\xe9f\xe9rence\nScore score = null;\n")),(0,r.kt)("h3",{id:"variable-nullable"},"Variable nullable"),(0,r.kt)("p",null,"La pr\xe9sence d'\xe9l\xe9ment null peut apport\xe9 des cons\xe9quences difficiles \xe0 rectifier. Par d\xe9fault, un warning est \xe9mis si une variable \xe0 eu la possibilit\xe9 d'\xeatre ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),". Dans les derni\xe8res versions de c# (9+), il est possible d'identifier une variable comme \xe9tant possiblement null sans warning. Il ne faut pas oublier de tester la nullit\xe9 quand on utilise cette variable par la suite."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c#"},'// Ctrl-z durant la saisie retourne un \xe9l\xe9ment vide\n// Le ? apr\xe8s le type indique la possiblit\xe9 d\'un r\xe9f\xe9rence null (controll\xe9)\nstring? name = Console.ReadLine();\n\n// Test de nullit\xe9\nif (name != null)\n{\n    Console.WriteLine("Pas null!.")\n}\n')))}d.isMDXComponent=!0}}]);